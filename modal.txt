‚úÖ 1. HTML Structure
Ensure your modal-section.component.html looks like this:

html
Copy
Edit
<div mat-dialog-container class="custom-dialog-container">
  <button mat-icon-button class="close-button" mat-dialog-close>
    <mat-icon color="warn">close</mat-icon>
  </button>

  <h1 mat-dialog-title>Hi {{data.name}}</h1>
  <div mat-dialog-content>
    <p>What's your favorite animal?</p>
  </div>

  <div mat-dialog-actions class="dialog-actions">
    <button mat-button (click)="onNoClick()">No Thanks</button>
    <button mat-button [mat-dialog-close]="data.animal" cdkFocusInitial>Ok</button>
  </div>
</div>
‚úÖ 2. CSS Styling
Add the following to your modal-section.component.scss (or .css):

scss
Copy
Edit
::ng-deep .mat-dialog-container.custom-dialog-container {
  background-color: white;
  border-radius: 8px;
  padding: 20px;
  position: relative;
  overflow: hidden;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  z-index: 10;
}

.dialog-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 20px;
}
üîç ::ng-deep is used to override Angular Material styles. If using newer Angular versions, consider using a global style file or encapsulation strategies.

‚úÖ 3. Optional Enhancements
If you want to apply these styles globally or ensure they work with dynamic modals, apply them in styles.scss with ::ng-deep or use [panelClass] in your TypeScript component when opening the modal:

ts
Copy
Edit
this.dialog.open(ModalSectionComponent, {
  panelClass: 'custom-dialog-container',
  data: { name: 'John' }
});
Let me know if you'd like help implementing this in your TypeScript logic or setting up animations/styling refinements.

You said:
