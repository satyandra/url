import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';

@Component({
  selector: 'app-initiative-form',
  templateUrl: './initiative-form.component.html',
  styleUrls: ['./initiative-form.component.scss']
})
export class InitiativeFormComponent implements OnInit {
  initiativeForm!: FormGroup;

  initiativeTypes = ['Regulatory', 'Strategic', 'Operational'];
  pmos = ['PMO 1', 'PMO 2', 'PMO 3'];
  delegateOptions = ['Delegate 1', 'Delegate 2', 'Delegate 3'];
  projectManagerOptions = ['PM 1', 'PM 2', 'PM 3'];

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.initiativeForm = this.fb.group({
      initiativeName: ['', Validators.required],
      prNumber: ['', Validators.required],
      fiNumber: ['', Validators.required],
      initiativeType: ['', Validators.required],
      fundingAmount: ['', [Validators.required, this.currencyValidator]],
      pmo: ['', Validators.required],
      accountableExecutive: ['', Validators.required],
      delegates: [[]],
      projectManagers: [[], Validators.required],
      repositoryUrl: ['', Validators.pattern('https?://.+')]
    });
  }

  isFieldInvalid(fieldName: string): boolean {
    const control = this.initiativeForm.get(fieldName);
    return !!(control && control.invalid && (control.touched || control.dirty));
  }

  validateForm(requiredFieldCount: number): void {
    const allFields = Object.keys(this.initiativeForm.controls);
    const fieldsToCheck = requiredFieldCount === 6 ? allFields.slice(0, 6) : allFields;

    for (const field of fieldsToCheck) {
      this.initiativeForm.get(field)?.markAsTouched();
    }

    const invalidFields = fieldsToCheck.filter(field => this.initiativeForm.get(field)?.invalid);

    if (invalidFields.length === 0) {
      alert(`✅ ${requiredFieldCount === 6 ? 'First 6' : 'All'} fields are valid.`);
    } else {
      alert(`❌ Please fill out required fields.`);
    }
  }

  formatCurrency(controlName: string): void {
    const control = this.initiativeForm.get(controlName);
    const value = control?.value;
    if (value && !isNaN(value)) {
      control?.setValue(parseFloat(value).toFixed(2));
    }
  }

  currencyValidator(control: AbstractControl): { [key: string]: any } | null {
    const value = control.value;
    const pattern = /^\d+(?:\.\d{1,2})?$/;
    return pattern.test(value) ? null : { invalidCurrency: true };
  }
}
==========================
<form [formGroup]="initiativeForm" class="form-container">
  <div class="form-row">
    <div class="form-column">
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Initiative Name</mat-label>
        <input matInput formControlName="initiativeName" required>
        <mat-error *ngIf="isFieldInvalid('initiativeName')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>PR Number</mat-label>
        <input matInput formControlName="prNumber" required>
        <mat-error *ngIf="isFieldInvalid('prNumber')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>FI Number</mat-label>
        <input matInput formControlName="fiNumber" required>
        <mat-error *ngIf="isFieldInvalid('fiNumber')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Initiative Type</mat-label>
        <mat-select formControlName="initiativeType" required>
          <mat-option *ngFor="let type of initiativeTypes" [value]="type">{{ type }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('initiativeType')">Required</mat-error>
      </mat-form-field>
    </div>

    <div class="form-column">
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Funding Amount</mat-label>
        <input matInput formControlName="fundingAmount" required (blur)="formatCurrency('fundingAmount')">
        <span matPrefix>$&nbsp;</span>
        <mat-error *ngIf="isFieldInvalid('fundingAmount')">Enter a valid amount</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>PMO</mat-label>
        <mat-select formControlName="pmo" required>
          <mat-option *ngFor="let p of pmos" [value]="p">{{ p }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('pmo')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Accountable Executive</mat-label>
        <input matInput formControlName="accountableExecutive" required>
        <mat-error *ngIf="isFieldInvalid('accountableExecutive')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Delegates</mat-label>
        <mat-select formControlName="delegates" multiple>
          <mat-option *ngFor="let delegate of delegateOptions" [value]="delegate">{{ delegate }}</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Project Manager</mat-label>
        <mat-select formControlName="projectManagers" multiple required>
          <mat-option *ngFor="let pm of projectManagerOptions" [value]="pm">{{ pm }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('projectManagers')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Project Repository URL</mat-label>
        <input matInput formControlName="repositoryUrl">
        <mat-error *ngIf="isFieldInvalid('repositoryUrl')">Enter a valid URL</mat-error>
      </mat-form-field>
    </div>
  </div>

  <div class="button-row">
    <button mat-raised-button color="primary" (click)="validateForm(6)">Validate First 6</button>
    <button mat-raised-button color="accent" (click)="validateForm(10)">Validate All</button>
  </div>
</form>

<style>
  .form-container {
    display: flex;
    flex-direction: column;
    padding: 24px;
    background: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
  }

  .form-row {
    display: flex;
    gap: 40px;
  }

  .form-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .full-width {
    width: 100%;
  }

  .button-row {
    margin-top: 24px;
    display: flex;
    justify-content: center;
    gap: 20px;
  }
</style>
