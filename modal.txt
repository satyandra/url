import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';

@Component({
  selector: 'app-initiative-form',
  templateUrl: './initiative-form.component.html',
  styleUrls: ['./initiative-form.component.scss']
})
export class InitiativeFormComponent implements OnInit {
  initiativeForm!: FormGroup;

  initiativeTypes = ['Regulatory', 'Strategic', 'Operational'];
  pmos = ['PMO 1', 'PMO 2', 'PMO 3'];
  delegateOptions = ['Delegate 1', 'Delegate 2', 'Delegate 3'];
  projectManagerOptions = ['PM 1', 'PM 2', 'PM 3'];

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.initiativeForm = this.fb.group({
      initiativeName: ['', Validators.required],
      prNumber: ['', Validators.required],
      fiNumber: ['', Validators.required],
      initiativeType: ['', Validators.required],
      fundingAmount: ['', [Validators.required, this.currencyValidator]],
      pmo: ['', Validators.required],
      accountableExecutive: ['', Validators.required],
      delegates: [[]],
      projectManagers: [[], Validators.required],
      repositoryUrl: ['', Validators.pattern('https?://.+')]
    });
  }

  isFieldInvalid(fieldName: string): boolean {
    const control = this.initiativeForm.get(fieldName);
    return !!(control && control.invalid && (control.touched || control.dirty));
  }

  validateForm(requiredFieldCount: number): void {
    const allFields = Object.keys(this.initiativeForm.controls);
    const fieldsToCheck = requiredFieldCount === 6 ? allFields.slice(0, 6) : allFields;

    for (const field of fieldsToCheck) {
      this.initiativeForm.get(field)?.markAsTouched();
    }

    const invalidFields = fieldsToCheck.filter(field => this.initiativeForm.get(field)?.invalid);

    if (invalidFields.length === 0) {
      alert(`‚úÖ ${requiredFieldCount === 6 ? 'First 6' : 'All'} fields are valid.`);
    } else {
      alert(`‚ùå Please fill out required fields.`);
    }
  }

  formatCurrency(controlName: string): void {
    const control = this.initiativeForm.get(controlName);
    const value = control?.value;
    if (value && !isNaN(value)) {
      control?.setValue(parseFloat(value).toFixed(2));
    }
  }

  currencyValidator(control: AbstractControl): { [key: string]: any } | null {
    const value = control.value;
    const pattern = /^\d+(?:\.\d{1,2})?$/;
    return pattern.test(value) ? null : { invalidCurrency: true };
  }
}
==========================
<form [formGroup]="initiativeForm" class="form-container">
  <div class="form-row">
    <div class="form-column">
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Initiative Name</mat-label>
        <input matInput formControlName="initiativeName" required>
        <mat-error *ngIf="isFieldInvalid('initiativeName')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>PR Number</mat-label>
        <input matInput formControlName="prNumber" required>
        <mat-error *ngIf="isFieldInvalid('prNumber')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>FI Number</mat-label>
        <input matInput formControlName="fiNumber" required>
        <mat-error *ngIf="isFieldInvalid('fiNumber')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Initiative Type</mat-label>
        <mat-select formControlName="initiativeType" required>
          <mat-option *ngFor="let type of initiativeTypes" [value]="type">{{ type }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('initiativeType')">Required</mat-error>
      </mat-form-field>
    </div>

    <div class="form-column">
      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Funding Amount</mat-label>
        <input matInput formControlName="fundingAmount" required (blur)="formatCurrency('fundingAmount')">
        <span matPrefix>$&nbsp;</span>
        <mat-error *ngIf="isFieldInvalid('fundingAmount')">Enter a valid amount</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>PMO</mat-label>
        <mat-select formControlName="pmo" required>
          <mat-option *ngFor="let p of pmos" [value]="p">{{ p }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('pmo')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Accountable Executive</mat-label>
        <input matInput formControlName="accountableExecutive" required>
        <mat-error *ngIf="isFieldInvalid('accountableExecutive')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Delegates</mat-label>
        <mat-select formControlName="delegates" multiple>
          <mat-option *ngFor="let delegate of delegateOptions" [value]="delegate">{{ delegate }}</mat-option>
        </mat-select>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Project Manager</mat-label>
        <mat-select formControlName="projectManagers" multiple required>
          <mat-option *ngFor="let pm of projectManagerOptions" [value]="pm">{{ pm }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('projectManagers')">Required</mat-error>
      </mat-form-field>

      <mat-form-field appearance="outline" class="full-width">
        <mat-label>Project Repository URL</mat-label>
        <input matInput formControlName="repositoryUrl">
        <mat-error *ngIf="isFieldInvalid('repositoryUrl')">Enter a valid URL</mat-error>
      </mat-form-field>
    </div>
  </div>

  <div class="button-row">
    <button mat-raised-button color="primary" (click)="validateForm(6)">Validate First 6</button>
    <button mat-raised-button color="accent" (click)="validateForm(10)">Validate All</button>
  </div>
</form>

<style>
  .form-container {
    display: flex;
    flex-direction: column;
    padding: 24px;
    background: #fff;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
  }

  .form-row {
    display: flex;
    gap: 40px;
  }

  .form-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .full-width {
    width: 100%;
  }

  .button-row {
    margin-top: 24px;
    display: flex;
    justify-content: center;
    gap: 20px;
  }
</style>
========================
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';

@Component({
  selector: 'app-initiative-form',
  templateUrl: './initiative-form.component.html',
  styleUrls: ['./initiative-form.component.scss']
})
export class InitiativeFormComponent implements OnInit {
  initiativeForm!: FormGroup;

  initiativeTypes = ['Regulatory', 'Strategic', 'Operational'];
  pmos = ['PMO 1', 'PMO 2', 'PMO 3'];
  delegateOptions = ['Delegate 1', 'Delegate 2', 'Delegate 3'];
  projectManagerOptions = ['PM 1', 'PM 2', 'PM 3'];

  // üü© Flags to disable fields
  disableFields = {
    initiativeType: false,
    pmo: false,
    fundingAmount: false
  };

  constructor(private fb: FormBuilder) {}

  ngOnInit(): void {
    this.initiativeForm = this.fb.group({
      initiativeName: [{ value: '', disabled: false }, Validators.required],
      prNumber: [{ value: '', disabled: false }, Validators.required],
      fiNumber: [{ value: '', disabled: false }, Validators.required],
      initiativeType: [{ value: '', disabled: this.disableFields.initiativeType }, Validators.required],
      fundingAmount: [{ value: '', disabled: this.disableFields.fundingAmount }, [Validators.required, this.currencyValidator]],
      pmo: [{ value: '', disabled: this.disableFields.pmo }, Validators.required],
      accountableExecutive: ['', Validators.required],
      delegates: [[]],
      projectManagers: [[], Validators.required],
      repositoryUrl: ['', Validators.pattern('https?://.+')]
    });

    this.patchFormData();
  }

  patchFormData(): void {
    const data = {
      initiativeName: 'Digital Transformation',
      prNumber: 'PR-2025-001',
      fiNumber: 'FI-987654',
      initiativeType: 'Strategic',
      fundingAmount: '150000.00',
      pmo: 'PMO 1',
      accountableExecutive: 'Jane Doe',
      delegates: ['Delegate 1', 'Delegate 3'],
      projectManagers: ['PM 2'],
      repositoryUrl: 'https://github.com/example/repo'
    };

    this.initiativeForm.patchValue(data);
  }

  isFieldInvalid(fieldName: string): boolean {
    const control = this.initiativeForm.get(fieldName);
    return !!(control && control.invalid && (control.touched || control.dirty));
  }

  validateForm(requiredFieldCount: number): void {
    const allFields = Object.keys(this.initiativeForm.controls);
    const fieldsToCheck = requiredFieldCount === 6 ? allFields.slice(0, 6) : allFields;

    for (const field of fieldsToCheck) {
      this.initiativeForm.get(field)?.markAsTouched();
    }

    const invalidFields = fieldsToCheck.filter(field => this.initiativeForm.get(field)?.invalid);

    if (invalidFields.length === 0) {
      alert(`‚úÖ ${requiredFieldCount === 6 ? 'First 6' : 'All'} fields are valid.`);
    } else {
      alert(`‚ùå Please fill out required fields.`);
    }
  }

  formatCurrency(controlName: string): void {
    const control = this.initiativeForm.get(controlName);
    const value = control?.value;
    if (value && !isNaN(value)) {
      control?.setValue(parseFloat(value).toFixed(2));
    }
  }

  currencyValidator(control: AbstractControl): { [key: string]: any } | null {
    const value = control.value;
    const pattern = /^\d+(?:\.\d{1,2})?$/;
    return pattern.test(value) ? null : { invalidCurrency: true };
  }
}
=============
<form [formGroup]="initiativeForm" class="form-wrapper">
  <div class="form-grid">

    <!-- Initiative Name -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>Initiative Name</mat-label>
        <input matInput formControlName="initiativeName" />
        <mat-error *ngIf="isFieldInvalid('initiativeName')">Initiative Name is required</mat-error>
      </mat-form-field>
    </div>

    <!-- PR Number -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>PR Number</mat-label>
        <input matInput formControlName="prNumber" />
        <mat-error *ngIf="isFieldInvalid('prNumber')">PR Number is required</mat-error>
      </mat-form-field>
    </div>

    <!-- FI Number -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>FI Number</mat-label>
        <input matInput formControlName="fiNumber" />
        <mat-error *ngIf="isFieldInvalid('fiNumber')">FI Number is required</mat-error>
      </mat-form-field>
    </div>

    <!-- Initiative Type -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>Initiative Type</mat-label>
        <mat-select formControlName="initiativeType" [disabled]="disableFields.initiativeType">
          <mat-option *ngFor="let type of initiativeTypes" [value]="type">{{ type }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('initiativeType')">Required</mat-error>
      </mat-form-field>
    </div>

    <!-- Funding Amount -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>Funding Amount</mat-label>
        <span matPrefix>$&nbsp;</span>
        <input matInput formControlName="fundingAmount" (blur)="formatCurrency('fundingAmount')" />
        <mat-error *ngIf="isFieldInvalid('fundingAmount')">Enter a valid amount</mat-error>
      </mat-form-field>
    </div>

    <!-- PMO -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>PMO</mat-label>
        <mat-select formControlName="pmo" [disabled]="disableFields.pmo">
          <mat-option *ngFor="let p of pmos" [value]="p">{{ p }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('pmo')">PMO is required</mat-error>
      </mat-form-field>
    </div>

    <!-- Accountable Executive -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>Accountable Executive</mat-label>
        <input matInput formControlName="accountableExecutive" />
        <mat-error *ngIf="isFieldInvalid('accountableExecutive')">Required</mat-error>
      </mat-form-field>
    </div>

    <!-- Delegates -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>Delegates</mat-label>
        <mat-select formControlName="delegates" multiple>
          <mat-option *ngFor="let d of delegateOptions" [value]="d">{{ d }}</mat-option>
        </mat-select>
      </mat-form-field>
    </div>

    <!-- Project Managers -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>Project Managers</mat-label>
        <mat-select formControlName="projectManagers" multiple>
          <mat-option *ngFor="let pm of projectManagerOptions" [value]="pm">{{ pm }}</mat-option>
        </mat-select>
        <mat-error *ngIf="isFieldInvalid('projectManagers')">At least one is required</mat-error>
      </mat-form-field>
    </div>

    <!-- Repository URL -->
    <div class="form-field">
      <mat-form-field appearance="fill">
        <mat-label>Repository URL</mat-label>
        <input matInput formControlName="repositoryUrl" />
        <mat-error *ngIf="isFieldInvalid('repositoryUrl')">Enter a valid URL</mat-error>
      </mat-form-field>
    </div>

  </div>

  <div class="button-group">
    <button mat-raised-button color="primary" (click)="validateForm(6)">Validate First 6</button>
    <button mat-raised-button color="accent" (click)="validateForm(10)">Validate All</button>
  </div>
</form>

.form-wrapper {
  padding: 32px;
  background: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 24px;
}

.form-field {
  display: flex;
  flex-direction: column;
}

.button-group {
  margin-top: 32px;
  display: flex;
  justify-content: center;
  gap: 16px;
}

mat-form-field {
  width: 100%;
}

==================

Satyandrasaradhi Polani <psatyandrasaradhi@gmail.com>
12:00‚ÄØAM (0 minutes ago)
to me

import { Component, ViewChild, ElementRef } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';

@Component({
selector: 'app-loading-popup',
standalone: true,
imports: [CommonModule],
templateUrl: './loading-popup.component.html'
})
export class LoadingPopupComponent {
@ViewChild('loadingModal') loadingModal!: ElementRef;
private modalRef!: NgbModalRef;

constructor(private modalService: NgbModal) {}

open(message?: string) {
this.modalRef = this.modalService.open(this.loadingModal, {
centered: true,
backdrop: 'static',
keyboard: false
});
}

close() {
if (this.modalRef) {
this.modalRef.close();
}
}
}



-===========

<ng-template #loadingModal>
<div class="modal-body text-center">
<p>Loading... Please wait</p>
<div class="spinner-border text-primary" role="status">
<span class="visually-hidden">Loading...</span>
</div>
</div>
</ng-template>
‚Äî‚Äî‚Äî

import { Component, ViewChild, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LoadingPopupComponent } from '../loading-popup/loading-popup.component';

@Component({
selector: 'app-parent',
standalone: true,
imports: [CommonModule, LoadingPopupComponent],
templateUrl: './parent.component.html'
})
export class ParentComponent implements AfterViewInit {
@ViewChild(LoadingPopupComponent) loader!: LoadingPopupComponent;

ngAfterViewInit() {
// optional trigger
// this.loader.open();
}

showLoader() {
this.loader.open();
}

hideLoader() {
this.loader.close();
}
}
‚Äî-

.modal-body {
background-color: #ffffff;
text-align: center;
padding: 2rem;
border-radius: 8px;
font-size: 1.1rem;
color: #333;

p {
margin-bottom: 1.5rem;
font-weight: 500;
}

.spinner-border {
width: 3rem;
height: 3rem;
color: #007bff; // Bootstrap primary blue
margin: 1rem auto;
}
}

.bmo-loading {
margin-top: 1rem;

img {
width: 50px;
height: auto;
animation: spin 1.2s linear infinite;
}
}

@keyframes spin {
0% { transform: rotate(0deg); }
100% { transform: rotate(360deg); }
}


