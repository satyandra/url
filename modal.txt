 app.component.ts
ts
Copy
Edit
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
  form: FormGroup;
  options = ['Option 1', 'Option 2', 'Option 3'];

  textFields = [
    { name: 'field1', label: 'Field 1' },
    { name: 'field2', label: 'Field 2' },
    { name: 'field3', label: 'Field 3' },
    { name: 'field4', label: 'Field 4' },
    { name: 'field5', label: 'Field 5' }
  ];

  multiSelects = [
    { name: 'multi1', label: 'Multi 1' },
    { name: 'multi2', label: 'Multi 2' },
    { name: 'multi3', label: 'Multi 3' },
    { name: 'multi4', label: 'Multi 4' }
  ];

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({
      field1: [''],
      field2: [''],
      field3: [''],
      field4: [''],
      field5: [''],
      multi1: [[]],
      multi2: [[]],
      multi3: [[]],
      multi4: [[]],
      url: ['', [Validators.pattern('https?://.+')]]
    });
  }

  ngOnInit(): void {
    this.patchValues();
  }

  setRequiredFields(count: number) {
    const allControls = [
      ...this.textFields.map(f => f.name),
      ...this.multiSelects.map(m => m.name),
      'url'
    ];

    allControls.forEach(control => {
      this.form.get(control)?.clearValidators();
    });

    allControls.slice(0, count).forEach(control => {
      if (control === 'url') {
        this.form.get(control)?.setValidators([
          Validators.required,
          Validators.pattern('https?://.+')
        ]);
      } else {
        this.form.get(control)?.setValidators([Validators.required]);
      }
    });

    allControls.forEach(control => {
      this.form.get(control)?.updateValueAndValidity();
    });
  }

  patchValues() {
    this.form.patchValue({
      field1: 'Alpha',
      field2: 'Beta',
      field3: 'Gamma',
      field4: 'Delta',
      field5: 'Epsilon',
      multi1: ['Option 1', 'Option 2'],
      multi2: ['Option 3'],
      multi3: [],
      multi4: ['Option 1'],
      url: 'https://example.com'
    });
  }
}
ðŸ§© app.component.html
html
Copy
Edit
<form [formGroup]="form">
  <div class="form-grid">
    <mat-form-field appearance="fill" *ngFor="let control of textFields">
      <mat-label>{{ control.label }}</mat-label>
      <input matInput [formControlName]="control.name" />
      <mat-error *ngIf="form.get(control.name)?.hasError('required')">
        {{ control.label }} is required
      </mat-error>
    </mat-form-field>

    <mat-form-field appearance="fill" *ngFor="let control of multiSelects">
      <mat-label>{{ control.label }}</mat-label>
      <mat-select [formControlName]="control.name" multiple>
        <mat-option *ngFor="let option of options" [value]="option">
          {{ option }}
        </mat-option>
      </mat-select>
      <mat-error *ngIf="form.get(control.name)?.hasError('required')">
        {{ control.label }} is required
      </mat-error>
    </mat-form-field>

    <mat-form-field appearance="fill">
      <mat-label>URL</mat-label>
      <input matInput formControlName="url" />
      <mat-error *ngIf="form.get('url')?.hasError('required')">
        URL is required
      </mat-error>
      <mat-error *ngIf="form.get('url')?.hasError('pattern')">
        Enter a valid URL (https://...)
      </mat-error>
    </mat-form-field>
  </div>

  <div class="buttons">
    <button mat-raised-button color="primary" (click)="setRequiredFields(6)">Set 6 Required</button>
    <button mat-raised-button color="accent" (click)="setRequiredFields(9)">Set 9 Required</button>
    <button mat-raised-button color="warn" (click)="patchValues()">Patch Values</button>
  </div>
</form>
ðŸŽ¨ app.component.css
css
Copy
Edit
.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 16px;
  margin-bottom: 20px;
}

.buttons {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
}
ðŸ“¦ app.module.ts
Ensure these are imported:

ts
Copy
Edit
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatButtonModule } from '@angular/material/button';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    BrowserAnimationsModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatButtonModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}


================================
<h2 class="title">MyProjects</h2>

<form [formGroup]="form" class="form-container">
  <!-- Left Column -->
  <div class="form-column">
    <ng-container *ngFor="let field of leftFields">
      <mat-form-field appearance="fill" class="full-width" *ngIf="field.type === 'text'">
        <mat-label>{{ field.label }}</mat-label>
        <input matInput [formControlName]="field.name" [disabled]="disableFields" />
        <mat-hint *ngIf="field.hint">{{ field.hint }}</mat-hint>
      </mat-form-field>

      <mat-form-field appearance="fill" class="full-width" *ngIf="field.type === 'select'">
        <mat-label>{{ field.label }}</mat-label>
        <mat-select [formControlName]="field.name" [multiple]="true" [disabled]="disableFields">
          <mat-option *ngFor="let option of options[field.name]" [value]="option">{{ option }}</mat-option>
        </mat-select>
        <mat-hint *ngIf="field.hint">{{ field.hint }}</mat-hint>
      </mat-form-field>
    </ng-container>
  </div>

  <!-- Right Column -->
  <div class="form-column">
    <ng-container *ngFor="let field of rightFields">
      <mat-form-field appearance="fill" class="full-width" *ngIf="field.type === 'text'">
        <mat-label>{{ field.label }}</mat-label>
        <input matInput [formControlName]="field.name" [disabled]="disableFields" />
        <mat-hint *ngIf="field.hint">{{ field.hint }}</mat-hint>
      </mat-form-field>

      <mat-form-field appearance="fill" class="full-width" *ngIf="field.type === 'select'">
        <mat-label>{{ field.label }}</mat-label>
        <mat-select [formControlName]="field.name" [multiple]="true" [disabled]="disableFields">
          <mat-option *ngFor="let option of options[field.name]" [value]="option">{{ option }}</mat-option>
        </mat-select>
        <mat-hint *ngIf="field.hint">{{ field.hint }}</mat-hint>
      </mat-form-field>
    </ng-container>
  </div>
</form>

<div class="button-row">
  <button mat-raised-button color="primary" (click)="setRequiredFields(6)">Set 6 Required</button>
  <button mat-raised-button color="accent" (click)="setRequiredFields(9)">Set 9 Required</button>
  <button mat-raised-button color="warn" (click)="patchValues()">Patch Values</button>
</div>

<style>
  .title {
    font-size: 26px;
    font-weight: 600;
    color: #003366;
    padding: 16px 0;
    margin-bottom: 8px;
    border-bottom: 2px solid #ccc;
    text-align: center;
  }

  .form-container {
    display: flex;
    gap: 40px;
    padding: 32px 48px;
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  }

  .form-column {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 28px;
  }

  .full-width {
    width: 100%;
  }

  .button-row {
    margin-top: 24px;
    text-align: center;
  }

  .button-row button {
    margin: 0 12px;
    min-width: 120px;
  }
</style>

===========================
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html'
})
export class AppComponent {
  form: FormGroup;
  disableFields = false;

  // Define dynamic fields for the form
  leftFields = [
    { name: 'field1', label: 'Text Field 1', type: 'text' },
    { name: 'field2', label: 'Text Field 2', type: 'text' },
    { name: 'multi1', label: 'MultiSelect 1', type: 'select' },
    { name: 'multi2', label: 'MultiSelect 2', type: 'select' },
    { name: 'url', label: 'Repository URL', type: 'text' }
  ];

  rightFields = [
    { name: 'field3', label: 'Text Field 3', type: 'text' },
    { name: 'field4', label: 'Text Field 4', type: 'text' },
    { name: 'field5', label: 'Text Field 5', type: 'text' },
    { name: 'multi3', label: 'MultiSelect 3', type: 'select' },
    { name: 'multi4', label: 'MultiSelect 4', type: 'select' }
  ];

  // Multi-select options
  options: Record<string, string[]> = {
    multi1: ['Option A', 'Option B', 'Option C'],
    multi2: ['Option X', 'Option Y', 'Option Z'],
    multi3: ['Red', 'Green', 'Blue'],
    multi4: ['One', 'Two', 'Three']
  };

  constructor(private fb: FormBuilder) {
    this.form = this.fb.group({});
    this.initForm();
  }

  initForm() {
    // Add all controls dynamically
    [...this.leftFields, ...this.rightFields].forEach(field => {
      this.form.addControl(
        field.name,
        this.fb.control({ value: '', disabled: this.disableFields })
      );
    });
  }

  setRequiredFields(count: number) {
    // Remove existing validators
    Object.keys(this.form.controls).forEach(key => {
      const control = this.form.get(key);
      control?.clearValidators();
      control?.updateValueAndValidity();
    });

    // Set validators on first `count` fields
    const allFields = [...this.leftFields, ...this.rightFields];
    allFields.slice(0, count).forEach(field => {
      const control = this.form.get(field.name);
      control?.setValidators(Validators.required);
      control?.updateValueAndValidity();
    });
  }

  patchValues() {
    this.form.patchValue({
      field1: 'Patched Text 1',
      field2: 'Patched Text 2',
      field3: 'Patched Text 3',
      field4: 'Patched Text 4',
      field5: 'Patched Text 5',
      url: 'https://example.com',
      multi1: ['Option A', 'Option C'],
      multi2: ['Option Y'],
      multi3: ['Red', 'Blue'],
      multi4: ['One']
    });
  }
}
